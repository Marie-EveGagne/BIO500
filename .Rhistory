else if (etudiant_noms[i,1]=='cassandre_godin'){
etudiant_noms[i,1] <- str_replace(etudiant_noms[i,1],'cassandre_godin','cassandra_godin')
etudiant_noms[i,3] <- str_replace(etudiant_noms[i,2],'cassandre','cassandra')
}
else if (etudiant_noms[i,1]=='edouard_nadon-baumier'){
etudiant_noms[i,1] <- str_replace(etudiant_noms[i,1],'edouard_nadon-baumier','edouard_nadon-beaumier')
etudiant_noms[i,3] <- str_replace(etudiant_noms[i,3],'nadon-baumier','nadon-beaumier')
}
else if (etudiant_noms[i,1]=='francis_bolly'){
etudiant_noms[i,1] <- str_replace(etudiant_noms[i,1],'francis_bolly','francis_boily')
etudiant_noms[i,3] <- str_replace(etudiant_noms[i,3],'bolly','boily')
}
else if (etudiant_noms[i,1]=='louis-philipe_theriault'){
etudiant_noms[i,1] <- str_replace(etudiant_noms[i,1],'louis-philipe_theriault','louis-philippe_theriault')
etudiant_noms[i,2] <- str_replace(etudiant_noms[i,2],'louis-philipe','louis-philippe')
}
else if (etudiant_noms[i,1]=='louis-philippe_therrien'){
etudiant_noms[i,1] <- str_replace(etudiant_noms[i,1],'louis-philippe_therrien','louis-philippe_theriault')
etudiant_noms[i,3] <- str_replace(etudiant_noms[i,3],'therrien','theriault')
}
else if (etudiant_noms[i,1]=='louis-phillipe_theriault'){
etudiant_noms[i,1] <- str_replace(etudiant_noms[i,1],'louis-phillipe_theriault','louis-philippe_theriault')
etudiant_noms[i,2] <- str_replace(etudiant_noms[i,2],'louis-phillipe','louis-philippe')
}
else if (etudiant_noms[i,1]=='mael_guerin'){
etudiant_noms[i,1] <- str_replace(etudiant_noms[i,1],'mael_guerin','mael_gerin')
etudiant_noms[i,3] <- str_replace(etudiant_noms[i,3],'guerin','gerin')
}
else if (etudiant_noms[i,1]=='marie_burghin'){
etudiant_noms[i,1] <- str_replace(etudiant_noms[i,1],'marie_burghin','marie_bughin')
etudiant_noms[i,3] <- str_replace(etudiant_noms[i,3],'burghin','bughin')
}
else if (etudiant_noms[i,1]=='peneloppe_robert'){
etudiant_noms[i,1] <- str_replace(etudiant_noms[i,1],'peneloppe_robert','penelope_robert')
etudiant_noms[i,2] <- str_replace(etudiant_noms[i,2],'peneloppe','penelope')
}
else if (etudiant_noms[i,1]=='sabrina_leclerc'){
etudiant_noms[i,1] <- str_replace(etudiant_noms[i,1],'sabrina_leclerc','sabrina_leclercq')
etudiant_noms[i,3] <- str_replace(etudiant_noms[i,3],'leclerc','leclercq')
}
else if (etudiant_noms[i,1]=='sabrina_leclerc'){
etudiant_noms[i,1] <- str_replace(etudiant_noms[i,1],'sabrina_leclerc','sabrina_leclercq')
etudiant_noms[i,3] <- str_replace(etudiant_noms[i,3],'leclerc','leclercq')
}
else if (etudiant_noms[i,1]=='simon_guilemette'){
etudiant_noms[i,1] <- str_replace(etudiant_noms[i,1],'simon_guilemette','simon_guillemette')
etudiant_noms[i,3] <- str_replace(etudiant_noms[i,3],'guilemette','guillemette')
}
else if (etudiant_noms[i,1]=='thomas_ramond'){
etudiant_noms[i,1] <- str_replace(etudiant_noms[i,1],'thomas_ramond','thomas_raymond')
etudiant_noms[i,3] <- str_replace(etudiant_noms[i,3],'ramond','raymond')
}
else if (etudiant_noms[i,1]=='yannick_sageau'){
etudiant_noms[i,1] <- str_replace(etudiant_noms[i,1],'yannick_sageau','yanick_sageau')
etudiant_noms[i,2] <- str_replace(etudiant_noms[i,2],'yannick','yanick')
}
else if (etudiant_noms[i,1]=='yanick_sagneau'){
etudiant_noms[i,1] <- str_replace(etudiant_noms[i,1],'yanick_sagneau','yanick_sageau')
etudiant_noms[i,3] <- str_replace(etudiant_noms[i,3],'sagneau','sageau')
}
}
etudiant_noms <- etudiant_noms[!duplicated(etudiant_noms), ]
#Retrait des etudiants en double avec des NAs
etudiant <- etudiant_noms
sommeNAs <- rowSums(is.na(etudiant))
etudiant <- cbind(etudiant,sommeNAs)
for (i in 1:nrow(etudiant)) {
for (j in 2:nrow(etudiant)) {
if(etudiant[i,1]==etudiant[j,1] && etudiant[i,9]<etudiant[j,9]){
etudiant <- etudiant[-c(j), ]
}
i=i+1
}
}
for (i in 1:nrow(etudiant)) {
for (j in 2:nrow(etudiant)) {
if(etudiant[i,1]==etudiant[j,1] && etudiant[i,9]>etudiant[j,9]){
etudiant <- etudiant[-c(i), ]
}
i=i+1
}
}
#Trouver l'indexation des noms en double non corrigÃ©s par la boucle
agrep('cassandra_godin', etudiant$prenom_nom, max.distance = 1, value = FALSE)
agrep('juliette_meilleur', etudiant$prenom_nom, max.distance = 1, value = FALSE)
agrep('mia_carriere ', etudiant$prenom_nom, max.distance = 1, value = FALSE)
agrep('rosalie_gagnon', etudiant$prenom_nom, max.distance = 1, value = FALSE)
etudiant <- etudiant[-c(30,84,118,134),]
etudiant <- etudiant[,-c(9)]
cours <- cours[!duplicated(cours), ]
collaboration <- collaboration[!duplicated(collaboration), ]
#Correction des noms mal ecrits dans collaboration
Collab_corr <- collaboration
for (i in 1:nrow(etudiant)) {
differences1 <- agrep(etudiant[i,1], Collab_corr$etudiant1, max.distance = 5, value = FALSE)
differences2 <- agrep(etudiant[i,1], Collab_corr$etudiant2, max.distance = 5, value = FALSE)
for (j in 1:length(differences1)) {
Collab_corr[differences1[j],1] <- paste0(etudiant[i,1])
}
for (k in 1:length(differences2)) {
Collab_corr[differences2[k],2] <- paste0(etudiant[i,1])
}
}
Collab_corr <- Collab_corr[!duplicated(Collab_corr), ]
write.csv(cours, 'C:/Users/Marie-Eve/OneDrive - USherbrooke/Bureau/UdeS/methode_comp/travail_collab/BIO500/merge_cours.csv', row.names=FALSE)
write.csv(etudiant, 'C:/Users/Marie-Eve/OneDrive - USherbrooke/Bureau/UdeS/methode_comp/travail_collab/BIO500/merge_etudiant.csv', row.names=FALSE)
write.csv(Collab_corr, 'C:/Users/Marie-Eve/OneDrive - USherbrooke/Bureau/UdeS/methode_comp/travail_collab/BIO500/merge_collaboration.csv', row.names=FALSE)
#daphnee
#write.csv(cours, 'C:/Users/Daphnee/Documents/BIO500/merge_cours.csv', row.names=FALSE)
#write.csv(etudiant, 'C:/Users/Daphnee/Documents/BIO500/merge_etudiant.csv', row.names=FALSE)
#write.csv(Collab_corr, 'C:/Users/Daphnee/Documents/BIO500/merge_collaboration.csv', row.names=FALSE)
#Connection au SQL, creations des matrices SQL et injection des donnees
con <- dbConnect(SQLite(), dbname="collab.db")
tbl_etudiant <- "CREATE TABLE etudiant (
prenom_nom              VARCHAR(40),
prenom                  VARCHAR(25),
nom                     VARCHAR(30),
region_administrative   VARCHAR(20),
regime_coop             BOLEAN(4),
formation_prealable     VARCHAR(20),
annee_debut             VARCHAR(5),
programme               INTEGER(6),
PRIMARY KEY (prenom_nom)
);"
tbl_cours <- "CREATE TABLE cours (
sigle     VARCHAR(10) NOT NULL,
optionnel BOLEAN(4) NOT NULL,
credits   INTEGER(1),
PRIMARY KEY (sigle, optionnel)
);"
tbl_collaboration <- "CREATE TABLE collaboration (
etudiant1   VARCHAR(40),
etudiant2   VARCHAR(40),
sigle       VARCHAR(10),
session     VARCHAR(5),
PRIMARY KEY (etudiant1, etudiant2, sigle),
FOREIGN KEY (etudiant1)          REFERENCES tbl_etudiant(prenom_nom),
FOREIGN KEY (etudiant2)          REFERENCES tbl_etudiant(prenom_nom),
FOREIGN KEY (sigle, session)     REFERENCES tbl_cours(sigle, session)
);"
dbSendQuery(con, tbl_cours)
dbSendQuery(con, tbl_etudiant)
dbSendQuery(con, tbl_collaboration)
dbWriteTable(con, append = TRUE, name = "tbl_cours", value = cours, row.names = FALSE)
dbWriteTable(con, append = TRUE, name = "tbl_etudiant", value = etudiant, row.names = FALSE)
dbWriteTable(con, append = TRUE, name = "tbl_collaboration", value = collaboration, row.names = FALSE)
#RÃ©pondre aux questions pour le cours de BIO500 et enregistrer les reponses dans un csv
sql_requete1 <- "SELECT etudiant1, count(etudiant2)
AS nb_collab
FROM tbl_collaboration
GROUP BY etudiant1;"
resultats_collab1 <- dbGetQuery(con, sql_requete1)
resultats_collab1
write.csv(resultats_collab1, 'C:/Users/Marie-Eve/OneDrive - USherbrooke/Bureau/UdeS/methode_comp/travail_collab/resultats.csv', row.names=FALSE)
rm(sql_requete2)
#sql_requete2 <- "SELECT sigle, session, count(tbl_cours.sigle)
#                 AS nb_collab
#                FROM tbl_collaboration
#               GROUP BY tbl_collaboration.etudiant1, tbl_collaboration.etudiant2;"
sql_requete2 <-"SELECT etudiant1, etudiant2, sigle, count(tbl_collaboration.sigle)
AS nb_collab
FROM tbl_collaboration
GROUP BY tbl_collaboration.sigle;"
#LEFT JOIN tbl_cours ON tbl_collaboration.sigle=tbl_cours.sigle;"
resultats_collab2 <- dbGetQuery(con, sql_requete2)
resultats_collab2
write.csv(resultats_collab2, 'C:/Users/Daphnee/Documents/BIO500/resultats.csv', row.names=FALSE)
##selection requete2_test3
sql_requete2 <- "
SELECT etudiant1, etudiant2, COUNT(sigle)
FROM collaboration
GROUP BY etudiant1, etudiant2;"
lien_paire_etudiants <- dbGetQuery(con, sql_requete2)
head(lien_paire_etudiants)
sql_requete2 <- "
SELECT etudiant1, etudiant2, COUNT(sigle)
FROM collaboration
GROUP BY etudiant1, etudiant2;"
lien_paire_etudiants <- dbGetQuery(con, sql_requete2)
head(lien_paire_etudiants)
sql_requete2 <-"SELECT etudiant1, etudiant2, sigle, count(tbl_collaboration.sigle)
AS nb_collab
FROM tbl_collaboration
GROUP BY tbl_collaboration.sigle;"
sql_requete2 <- "
SELECT etudiant1, etudiant2, COUNT(sigle)
FROM collaboration
GROUP BY etudiant1, etudiant2;"
lien_paire_etudiants <- dbGetQuery(con, sql_requete2)
head(lien_paire_etudiants)
resultats_collab2 <- dbGetQuery(con, sql_requete2)
resultats_collab2
##selection requete2_test3
sql_requete2 <- "
SELECT COUNT(*)
FROM collaboration
GROUP BY etudiant1, etudiant2;"
lien_paire_etudiants <- dbGetQuery(con, sql_requete2)
head(lien_paire_etudiants)
sql_requete2 <- "
SELECT etudiant1, etudiant2, COUNT(sigle)
FROM tbl_collaboration
GROUP BY etudiant1, etudiant2;"
lien_paire_etudiants <- dbGetQuery(con, sql_requete2)
head(lien_paire_etudiants)
View(lien_paire_etudiants)
con <- dbConnect(SQLite(), dbname="collab.db")
tbl_etudiant <- "CREATE TABLE etudiant (
prenom_nom              VARCHAR(40),
prenom                  VARCHAR(25),
nom                     VARCHAR(30),
region_administrative   VARCHAR(20),
regime_coop             BOLEAN(4),
formation_prealable     VARCHAR(20),
annee_debut             VARCHAR(5),
programme               INTEGER(6),
PRIMARY KEY (prenom_nom)
);"
tbl_cours <- "CREATE TABLE cours (
sigle     VARCHAR(10) NOT NULL,
optionnel BOLEAN(4) NOT NULL,
credits   INTEGER(1),
PRIMARY KEY (sigle, optionnel)
);"
tbl_collaboration <- "CREATE TABLE collaboration (
etudiant1   VARCHAR(40),
etudiant2   VARCHAR(40),
sigle       VARCHAR(10),
session     VARCHAR(5),
PRIMARY KEY (etudiant1, etudiant2, sigle),
FOREIGN KEY (etudiant1)          REFERENCES tbl_etudiant(prenom_nom),
FOREIGN KEY (etudiant2)          REFERENCES tbl_etudiant(prenom_nom),
FOREIGN KEY (sigle, session)     REFERENCES tbl_cours(sigle, session)
);"
dbSendQuery(con, tbl_cours)
dbSendQuery(con, tbl_etudiant)
dbSendQuery(con, tbl_collaboration)
dbRemoveTable(con, tbl_collaboration )
dbRemoveTable(con, collaboration )
DROP TABLE collaboration
supprimer <- DROP TABLE collaboration
supprimer <- "DROP TABLE collaboration"
dbGetQuery(con, supprimer)
dbExecute(con, supprimer)
tbl_collaboration <- "CREATE TABLE collaboration (
etudiant1   VARCHAR(40),
etudiant2   VARCHAR(40),
sigle       VARCHAR(10),
session     VARCHAR(5),
PRIMARY KEY (etudiant1, etudiant2, sigle),
FOREIGN KEY (etudiant1)          REFERENCES tbl_etudiant(prenom_nom),
FOREIGN KEY (etudiant2)          REFERENCES tbl_etudiant(prenom_nom),
FOREIGN KEY (sigle, session)     REFERENCES tbl_cours(sigle, session)
);"
dbSendQuery(con, tbl_collaboration)
sql_requete2 <- "
SELECT etudiant1, etudiant2, COUNT(sigle)
FROM tbl_collaboration
GROUP BY etudiant1, etudiant2;"
lien_paire_etudiants <- dbGetQuery(con, sql_requete2)
head(lien_paire_etudiants)
dbDisconnect(con)
con <- dbConnect(SQLite(), dbname="collab.db")
supprimer <- "DROP TABLE collaboration"
dbExecute(con, supprimer)
tbl_collaboration <- "CREATE TABLE collaboration (
etudiant1   VARCHAR(40),
etudiant2   VARCHAR(40),
sigle       VARCHAR(10),
session     VARCHAR(5),
PRIMARY KEY (etudiant1, etudiant2, sigle),
FOREIGN KEY (etudiant1)          REFERENCES tbl_etudiant(prenom_nom),
FOREIGN KEY (etudiant2)          REFERENCES tbl_etudiant(prenom_nom),
FOREIGN KEY (sigle, session)     REFERENCES tbl_cours(sigle, session)
);"
dbSendQuery(con, tbl_collaboration)
sql_requete2 <- "
SELECT etudiant1, etudiant2, COUNT(sigle)
FROM tbl_collaboration
GROUP BY etudiant1, etudiant2;"
lien_paire_etudiants <- dbGetQuery(con, sql_requete2)
head(lien_paire_etudiants)
head(lien_paire_etudiants)
cours
View(cours)
library(targets)
library(usethis)
tar_make()
tar_make()
tar_visnetwork()
tar_visnetwork()
setwd("C:/Users/Marie-Eve/OneDrive - USherbrooke/Bureau/UdeS/methode_comp/travail_collab/BIO500")
tar_visnetwork()
tar_visnetwork()
tar_visnetwork()
setwd("C:/Users/Marie-Eve/OneDrive - USherbrooke/Bureau/UdeS/methode_comp/travail_collab/BIO500")
source("/BIO500")
source("BIO500")
source("/travail_collab")
getwd()
source("/script_pipeline/")
file('BIO500', "r", encoding = encoding)
file('BIO500', "r")
setwd("C:/Users/Marie-Eve/OneDrive - USherbrooke/Bureau/UdeS/methode_comp/travail_collab/BIO500")
getwd
setwd("C:/Users/Marie-Eve/OneDrive - USherbrooke/Bureau/UdeS/methode_comp/travail_collab/BIO500")
getwd()
tar_visnetwork()
setwd('C:/Users/Marie-Eve/OneDrive - USherbrooke/Bureau/UdeS/methode_comp/travail_collab/BIO500')
tar_visnetwork()
rm(collaboration,etudiant_noms)
View(lien_paire_etudiants)
View(etudiant)
for (i in 1:nrow(etudiant)) {
differences1 <- agrep(etudiant[i,1], Collab_corr$etudiant1, max.distance = 5, value = FALSE)
differences2 <- agrep(etudiant[i,1], Collab_corr$etudiant2, max.distance = 5, value = FALSE)
for (j in 1:length(differences1)) {
Collab_corr[differences1[j],1] <- paste0(etudiant[i,1])
}
for (k in 1:length(differences2)) {
Collab_corr[differences2[k],2] <- paste0(etudiant[i,1])
}
}
for (i in 1:nrow(etudiant)) {
differences1 <- agrep(etudiant[i,1], Collab_corr$etudiant1, max.distance = 5, value = FALSE)
differences2 <- agrep(etudiant[i,1], Collab_corr$etudiant2, max.distance = 5, value = FALSE)
for (j in 1:length(differences1)) {
Collab_corr[differences1[j],1] <- paste0(etudiant[i,1])
}
for (k in 1:length(differences2)) {
Collab_corr[differences2[k],2] <- paste0(etudiant[i,1])
}
}
View(Collab_corr)
tar_visnetwork()
library(targets)
library(usethis)
tar_visnetwork()
path
tar_make()
tar_load(file_paths)
tar_read()
tar_make()
source("R/prep_donnees.R")
tar_make()
tar_read()
getwd
getwd()
tar_make()
getwd()
source("R/prep_donnees.R")
source("R/correction")
tar_make()
tar_make()
tar_make()
getwd()
tar_make()
tar_make()
tar_make()
getwd()
ls()
dir()
dir('R')
tar_make()
tar_make()
tar_make()
tar_make()
install.packages('tinytext')
R.version
install.packages('tinytex')
install.packages("tinytex")
library(tinytex)
tinytex::install_tinytex()
tar_make()
library(targets)
library(usethis)
tar_make()
tar_make()
tar_load(prep_donnees)
tar_load(data)
tar_make()
print(file_paths)
tar_read(file_paths)
con <- dbConnect(SQLite(), dbname="collab.db")
library(RSQLite)
library(stringr)
library(dplyr)
library(data.table)
library(stringdist)
library(igraph)
con <- dbConnect(SQLite(), dbname="collab.db")
tar_read(file_paths)
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_read(data)
tar_make()
tar_load(prep_donnees)
tar_read(prep_donnees)
source("R/correction")
source("R/correction.R")
tar_make()
tar_make()
fichiers <- c()
getwd()
allFiles <- dir('donnees_BIO500')
tabNames <- c('collaboration', 'cours', 'etudiant')
nbGroupe <- length(grep(tabNames[1], allFiles))
fichiers <- c()
for(tab in tabNames) {
tabFiles <- allFiles[grep(tab, allFiles)]
for(groupe in 1:nbGroupe) {
tabName <- paste0(tab, "_", groupe)
fichier <- paste0('donnees_BIO500/', tabFiles[groupe])
L <- readLines(fichier, n = 1)
separateur <- ifelse(grepl(';', L), ';', ',')
assign(tabName, read.table(fichier, header=TRUE, sep = separateur, stringsAsFactors = FALSE))
fichier[groupe] <- paste0(tabname)
}
}
print(allFiles)
allFiles <- dir('donnees_BIO500')
tabNames <- c('collaboration', 'cours', 'etudiant')
nbGroupe <- length(grep(tabNames[1], allFiles))
fichiers <- c()
for(tab in tabNames) {
tabFiles <- allFiles[grep(tab, allFiles)]
for(groupe in 1:nbGroupe) {
tabName <- paste0(tab, "_", groupe)
fichier <- paste0('donnees_BIO500/', tabFiles[groupe])
L <- readLines(fichier, n = 1)
separateur <- ifelse(grepl(';', L), ';', ',')
assign(tabName, read.table(fichier, header=TRUE, sep = separateur, stringsAsFactors = FALSE))
fichier[groupe] <- paste0(tabName)
}
}
print(fichier)
print(tabName)
tabNames <- c('collaboration', 'cours', 'etudiant')
nbGroupe <- length(grep(tabNames[1], allFiles))
fichiers <- c()
for(tab in tabNames) {
tabFiles <- allFiles[grep(tab, allFiles)]
for(groupe in 1:nbGroupe) {
tabName <- paste0(tab, "_", groupe)
fichier <- paste0('donnees_BIO500/', tabFiles[groupe])
L <- readLines(fichier, n = 1)
separateur <- ifelse(grepl(';', L), ';', ',')
assign(tabName, read.table(fichier, header=TRUE, sep = separateur, stringsAsFactors = FALSE))
fichier[groupe] <- paste0(tab, '_', groupe)
}
}
print(fichier)
tar_read(prep_donnees)
print(tabFiles)
print(tab)
print(prep_donnees)
tar_load(prep_donnees)
tar_make()
tar_load(prep_donnees)
tar_load(data)
print(data)
print(file_paths)
tar_load(file_paths)
print(file_paths)
tar_load(data)
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_load(datas)
rm(data)
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
fichier <- paste0('donnees_BIO500/', tabFiles[groupe])
tabFiles <- allFiles[grep(tab, allFiles)]
allFiles <- dir('donnees_BIO500')
fichier <- paste0('donnees_BIO500/', tabFiles[groupe])
tabFiles <- allFiles[grep(tab, allFiles)]
L <- readLines(datas, n = 1)
tar_make()
separateur <- ifelse(grepl(';', L), ';', ',')
tar_make()
tar_make()
tar_load(datas)
print(datas)
tar_make()
rm(datas)
fichiers<- c(datas)
tar_make()
tar_read(datas)
fichiers<- c(datas)
tar_load(datas)
rm(allFiles,datas,fichiers)
rm(L,separateur)
tar_make()
tar_load(datas)
tar_make()
tar_load(datas)
tar_read(datas)
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
